"""
一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。
求该青蛙跳上一个n级的台阶总共有多少种跳法。
"""
class Solution:
    def jumpFloorII(self, n):
        if n == 0:
            return 0
        elif n == 1:
            return 1
        elif n == 2:
            return 2
        else:
            res = [0]*(n+1)
            res[0] = 0
            res[1] = 1
            res[2] = 2

        for i in range(3,n+1):
            res[i] = sum(res[:i]) + 1
        return res[n]


"""
这里有三种思维方式：
1。
每个台阶可以看作一块木板，让青蛙跳上去，n个台阶就有n块木板，
最后一块木板是青蛙到达的位子， 必须存在，
其他 (n-1) 块木板可以任意选择是否存在，
则每个木板有存在和不存在两种选择，(n-1) 块木板 就有 [2^(n-1)] 种跳法，
可以直接得到结果。

2。
从高往低看
跳1级，剩下n-1级，则剩下跳法是f(n-1)
跳2级，剩下n-2级，则剩下跳法是f(n-2)
所以f(n)=f(n-1)+f(n-2)+...+f(1)
因为f(n-1)=f(n-2)+f(n-3)+...+f(1)
利用消元法
所以f(n)=2*f(n-1)

3.我自己做法和第二种有点相似：
0  0
1  1
2  2
3  1 + (1+2) 从第三级直接往下跳，加上前面两种情况
4  1 + 4 + 2 + 1 = 8 从第四级直接往下跳，
                    加上走一步，从第三级往下跳
                    加走两步，从第二级别往下跳，
                    加走三步，从第四级往下跳
                    
所以 fn = 1 + fn-1 + fn-2 .. f1
"""