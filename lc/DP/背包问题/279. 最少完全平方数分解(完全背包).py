"""
给你一个整数 n ，返回 和为 n 的完全平方数的最少数量 。

完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。
例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。

输入：n = 12
输出：3
解释：12 = 4 + 4 + 4
"""
class Solution(object):
    def numSquares(self, n):
        """
        :type n: int
        :rtype: int
        """

        # dp[i][j]
        # 在i遍历的范围内，我们要在其中最少选用多少次i**2
        # 才能使得选择的数之和为j，且使用的数最少
        dp = [n] * (n + 1)

        # 构造和为0，需要0个数去加
        dp[0] = 0

        # 遍历每个石头
        for i in range(n + 1):
            # 遍历每个体积，从小到大，遍历范围[i**2, n+1]
            for j in range(i**2, n + 1):
                # 假如我们不使用i**2, 那么dp[j] = dp[j], 所以我们可以省略
                # 假如我们使用i**2, 那么dp[j] = dp[j - i**2] + 1
                # min表示上面两种方案取最小值
                dp[j] = min(dp[j], dp[j - i**2] + 1)


        return dp[-1]

"""
完全背包
"""