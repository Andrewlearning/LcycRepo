lambda:
https://blog.csdn.net/zjuxsl/article/details/79437563

用法：
1。将lambda函数赋值给一个变量，通过这个变量间接调用该lambda函数。

    add=lambda x, y: x+y
    执行add(1,2)，输出为3。


2.将lambda函数赋值给其他函数，从而将其他函数用该lambda函数替换
3.将lambda函数作为其他函数的返回值，返回给调用者。

4.
filter函数。此时lambda函数用于指定过滤列表元素的条件
filter(lambda x: x % 3 == 0, [1, 2, 3])
指定将列表[1,2,3]中能够被3整除的元素过滤出来，其结果是[3]。

sorted函数。此时lambda函数用于指定对列表中所有元素进行排序的准则
sorted([1, 2, 3, 4, 5, 6, 7, 8, 9],key=lambda x: abs(5-x))
将列表[1, 2, 3, 4, 5, 6, 7, 8, 9]按照元素与5距离从小到大进行排序
其结果是[5, 4, 6, 3, 7, 2, 8, 1, 9]。

map函数。此时lambda函数用于指定对列表中每一个元素的共同操作
map(lambda x: x+1, [1, 2,3])将列表[1, 2, 3]中的元素分别加1，其结果[2, 3, 4]。

reduce函数。此时lambda函数用于指定列表中两两相邻元素的结合条件
例如reduce(lambda a, b: '{}, {}'.format(a, b), [1, 2, 3, 4, 5, 6, 7, 8, 9])
将列表 [1, 2, 3, 4, 5, 6, 7, 8, 9]中的元素从左往右两两以逗号分隔的字符的形式依次结合起来，其结果是'1, 2, 3, 4, 5, 6, 7, 8, 9'。


sorted,key,lambda的混用：
假如我们有一个数组，有多个元素
L=[('b',3),('a',5),('c',3),('d',4),('a',3)]

我们想只按照数字排序
>>> sorted(L, key=lambda x:x[1])
[('b', 3), ('c', 3), ('a', 3), ('d', 4), ('a', 5)]

我们想先按数字排序，然后再按照字符串排序
>>> sorted(L, key=lambda x:(x[1],x[0]))
[('a', 3), ('b', 3), ('c', 3), ('d', 4), ('a', 5)]


sorted,cmp,lambda的混用：
假如我们有一个数组，有多个元素
L=[('b',3),('a',5),('c',3),('d',4),('a',3)]

我们想按数组数字排序，我们要取出任意两个元素，然后用cmp去对比
逻辑是，x,y谁想排前面，就必须 x[1] > y[1] == True
sorted(L, cmp=lambda x,y:cmp(x[1],y[1]))
[('b', 3), ('c', 3), ('a', 3), ('d', 4), ('a', 5)]

所以我们可以用这个逻辑去做179题
我们想用两个字符串排序，看谁排前面，那么
lambda str1,str2 : str1 + str2 > str2 + str1
假如str1 + str2比较大，那么按str1,str2排
假如str2 + str1比较大，那么按str2,str1排

