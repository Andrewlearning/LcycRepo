class Solution:
    def Add(self, num1, num2):
        while num2 != 0:
            temp = num1 ^ num2
            num2 = (num1 & num2) << 1
            num1 = temp

        print(num1)
        return num1

if __name__ == "__main__":
    solution = Solution()
    solution.Add(4,4)


"""
似乎还是有点不懂，回去看书
答案：
这题重点在于利用异或（^）来模拟无进位的加法，然后通过与(&)运算模拟进位

首先看十进制是如何做的： 5+7=12，三步走
第一步：相加各位的值，不算进位，得到2。
第二步：计算进位值，得到10. 如果这一步的进位值为0，那么第一步得到的值就是最终结果。
第三步：重复上述两步，只是相加的值变成上述两步的得到的结果2和10，得到12。


同样我们可以用三步走的方式计算二进制值相加： 5-101，7-111 第一步：相加各位的值，不算进位，得到010，二进制每位相加就相当于各位做异或操作，101^111=010。

第二步：计算进位值(num2)，得到1010，相当于各位做与操作得到101，再向左移一位得到1010，(101&111)<<1 = 1010。

第三步重复上述两步， 各位相加 010^1010=1000，进位值为100=(010&1010)<<1。
     继续重复上述两步：1000^100 = 1100，进位值为0，跳出循环，1100为最终结果。

4 100

    100
    100
        ^
   --------
    000 
    
    100
    100
        &
   --------
    100          <<1后得到 1000
    
 num2 != 0 , num2 == 1000,所以得出答案
"""