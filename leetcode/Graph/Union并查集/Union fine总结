https://www.youtube.com/watch?v=YKE4Vd1ysPI
这种数据结构的作用是检测一个图有没有环

例如我们存在一个图

0----1----2---5
     |    |
     4

中心思想上是， 把能通过链接来访问到的各种点，放到一个集合里面去
例如（0，1，2，4，5）从任意一个点出发都能到达集合内的任意另一个点

那么假如说集合里的任意两个元素中间再相连，则会产生环
我们能使用这个规律，解决684问题




https://www.youtube.com/watch?v=EhouVyjgas8&t=1s
解决的是不交集的合并和查询问题：
Find：确定元素属于哪一个子集。它可以被用来确定两个元素是否属于同一子集。
Union：将两个子集合并成同一个集合。

a<---b<--c<--d
e<---f<--g
我们可以想象，每个集合分配好以后存在一个老大，在这里一个是a,一个是e

#初始化的时候，每个node的指针都是指向自己的
def init(n):
    x.parent = x

#根据node找到这个集合的老大
def fine(x):
    if x.parent == x:
        return x
    else:
        return fine(x.parents)
#合并两个集合，办法是一个集合的老大指向另一个集合的老大
def union(x,y):
    xRoot = find(x)
    yRoot = find(y)
    xRoot.parent = yRoot


union 有两种方法
1-->2  3
1.union without by rank:合并时不考虑集合的深度 3-->1---->2

我们一般使用两种优化方法：                                                                      /3
1.union by rank:合并时将元素所在深度小的集合合并到元素所在深度大的集合(比较好，使树的高度没这么高) 1--->2
2.路径压缩，把每个节点都指向它的最父节点，那么能使这个树的深度最低


